import sqlite3 as sq
import os
import hashlib
import shutil
import asyncio
import aiohttp
import aiofiles
from openpyxl import load_workbook
from config import name_table, db_tg, foldercheck, folder, ADMIN_ID
from app.work_schedulesdb import update_unique_schedules


async def download_tables(bot):
    base_url = "https://vsuet.ru/images/student/schedule/"
    os.makedirs(foldercheck, exist_ok=True)

    async with aiohttp.ClientSession() as session:
        for table_name in name_table:
            url = base_url + table_name
            path = os.path.join(foldercheck, table_name)

            os.makedirs(os.path.dirname(path), exist_ok=True)

            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                async with session.head(url) as resp:
                    content_type = resp.headers.get("Content-Type", "")
                    if "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" not in content_type:
                        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ .xlsx, –¥–æ–±–∞–≤–ª—è–µ–º "ocz/" –≤ —Å—Å—ã–ª–∫—É
                        url = base_url + "ocz/" + table_name

                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                async with session.get(url) as resp:
                    resp.raise_for_status()
                    async with aiofiles.open(path, 'wb') as f:
                        async for chunk in resp.content.iter_chunked(8192):
                            await f.write(chunk)

                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {table_name} | –†–∞–∑–º–µ—Ä: {os.path.getsize(path)} –±–∞–π—Ç")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {table_name}: {e}")

    await asyncio.sleep(1)
    await compare_hashes(bot, ADMIN_ID)

def get_file_hash(path, method='md5'):
    hash_func = hashlib.md5() if method == 'md5' else hashlib.sha256()
    with open(path, 'rb') as f:
        for chunk in iter(lambda: f.read(4096), b''):
            hash_func.update(chunk)
    return hash_func.hexdigest()


async def compare_hashes(bot, id1):
    old_files = {f: get_file_hash(os.path.join(folder, f)) for f in os.listdir(folder) if f.endswith('.xlsx')}
    new_files = {f: get_file_hash(os.path.join(foldercheck, f)) for f in os.listdir(foldercheck) if f.endswith('.xlsx')}
    updated_files = []

    for filename in new_files:
        if filename not in old_files:
            print(f"üÜï –ù–æ–≤—ã–π —Ñ–∞–π–ª: {filename}")
            updated_files.append(filename)
            await bot.send_message(ADMIN_ID, "üÜï –ù–æ–≤—ã–π —Ñ–∞–π–ª: {filename}")
            return False
        elif new_files[filename] != old_files[filename]:
            print(f"üîÑ –û–±–Ω–æ–≤–ª—ë–Ω —Ñ–∞–π–ª: {filename}")
            updated_files.append(filename)
        else:
            print(f"‚úÖ –ù–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: {filename}")

    if updated_files:
        await parsing_from_bd(bot, updated_files)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø –∏ –ø–æ–¥–≥—Ä—É–ø–ø, —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
async def parsing_from_bd(bot, update_files):
    chat_id1, chat_id2 = ADMIN_ID
    try:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        await bot.send_message(chat_id1, f"üìÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã {update_files}, –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω...")
        await bot.send_message(chat_id2, f"üìÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã {update_files}, –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω...")

        with sq.connect(db_tg, timeout=10) as db:
            cur = db.cursor()

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
            files = os.listdir(foldercheck)

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≥—Ä—É–ø–ø—ã
            def delete_old_schedule(tabl_name):
                cur.execute(f"DROP TABLE IF EXISTS {tabl_name}")

            # –ü—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –≤ –ø–∞–ø–∫–µ
            for file_index, file in enumerate(files, start=1):
                if file in update_files:

                    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞: {file}")
                    wb = load_workbook(os.path.join(foldercheck, file), data_only=True)
                    table_name = os.path.splitext(file)[0]

                    delete_old_schedule(table_name)

                    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                    cur.execute(f"""
                        CREATE TABLE IF NOT EXISTS {table_name}(
                            groups TEXT, 
                            subgroup INTEGER NOT NULL DEFAULT 1,
                            day TEXT,
                            time TEXT,
                            ChZn TEXT,
                            para TEXT
                        )""")

                    # –ü—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º –≤ —Ñ–∞–π–ª–µ
                    for sheetname in wb.sheetnames:
                        sheet = wb[sheetname]
                        # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ - 7, –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ - 2
                        row_number = 7
                        columns_number = 3

                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É 7, –Ω–∞—á–∏–Ω–∞—è —Å–æ 2-–π –∫–æ–ª–æ–Ω–∫–∏
                        row = sheet[row_number]  # –ü–æ–ª—É—á–∞–µ–º 7-—é —Å—Ç—Ä–æ–∫—É

                        # –ü—Ä–æ—Ö–æ–¥ –ø–æ —è—á–µ–π–∫–∞–º –≤ 7-–π —Å—Ç—Ä–æ–∫–µ, –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–∏
                        for idx, cell in enumerate(row[columns_number - 1:]):  # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0, –ø–æ—ç—Ç–æ–º—É -1
                            group_name = cell.value
                            if group_name is not None:
                                print(f'–ù–∞–π–¥–µ–Ω–æ –≤ –ª–∏—Å—Ç–µ {sheet.title}, –≤ —è—á–µ–π–∫–µ {cell.coordinate}')

                                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø —Å –ø–æ–¥–≥—Ä—É–ø–ø–∞–º–∏
                                if idx + 1 < len(row[columns_number - 1:]):
                                    next_cell = row[columns_number + idx]
                                    if next_cell.value is None:  # –ü–æ–¥–≥—Ä—É–ø–ø—ã 1 –∏ 2
                                        print(f"–í {group_name} –µ—Å—Ç—å 2 –ø–æ–¥–≥—Ä—É–ø–ø–∞")
                                        # –ü–∞—Ä—Å–∏–º –¥–ª—è –ø–æ–¥–≥—Ä—É–ø–ø—ã 1 –∏ 2
                                        await parsing_table(sheet, cell, table_name, group_name, 1, cur)
                                        await parsing_table(sheet, next_cell, table_name, group_name, 2, cur)
                                    else:
                                        print(f"–í {group_name} –ø–æ–¥–≥—Ä—É–ø–ø –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                                        # –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–æ–¥–≥—Ä—É–ø–ø—ã
                                        await parsing_table(sheet, cell, table_name, group_name, 1, cur)

        end_check_schedule(update_files)
        await update_unique_schedules()
        # –ó–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(chat_id=chat_id1,
                                    text="üìÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        await bot.send_message(chat_id=chat_id2,
                                    text="üìÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")


    except Exception as e:
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
        print(error_message)
        await bot.send_message(chat_id1, error_message)
        await bot.send_message(chat_id2, error_message)

async def parsing_table(sheet, cell, table_name, group_name, subgroup, cur):
    days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
    times = [
        "08:00 - 09:35", "09:45 - 11:20", "11:50 - 13:25",
        "13:35 - 15:10", "15:20 - 16:55", "17:05 - 18:40", "18:50 - 20:25"
    ]

    def find_root_cell(sheet, cell):
        for range_ in sheet.merged_cells.ranges:
            if cell.coordinate in range_:
                min_col, min_row, _, _ = range_.bounds
                return sheet.cell(row=min_row, column=min_col)
        return cell

    def is_merged_4_cells(cell):
        for range_ in sheet.merged_cells.ranges:
            if cell.coordinate in range_:
                min_col, min_row, max_col, max_row = range_.bounds
                width = max_col - min_col + 1
                height = max_row - min_row + 1
                if width * height == 4:
                    return True, min_col, min_row, max_col, max_row, width
        return False, None, None, None, None, None

    def is_merged(cell):
        for range_ in sheet.merged_cells.ranges:
            if cell.coordinate in range_:
                return True
        return False

    row = cell.row + 1
    col = cell.column

    for day in days:
        classes_count = 0
        while classes_count < 7:
            current_cell = sheet.cell(row=row, column=col)
            time_slot = times[classes_count]

            merged, min_col, min_row, max_col, max_row, width = is_merged_4_cells(current_cell)
            if merged:
                root_cell = find_root_cell(sheet, current_cell)
                cell_value = root_cell.value

                if width > 2:
                    cur.execute(f"""
                        INSERT INTO {table_name} (groups, subgroup, ChZn, para, day, time)
                        VALUES (?, ?, ?, ?, ?, ?)""",
                                (group_name, subgroup, '–ß–∏—Å–ª–∏—Ç–µ–ª—å', cell_value, day, time_slot))

                    znamenatel_cell = sheet.cell(row=row + 1, column=min_col)
                    znamenatel_value = find_root_cell(sheet, znamenatel_cell).value if is_merged(
                        znamenatel_cell) else znamenatel_cell.value

                    if znamenatel_value:
                        cur.execute(f"""
                            INSERT INTO {table_name} (groups, subgroup, ChZn, para, day, time)
                            VALUES (?, ?, ?, ?, ?, ?)""",
                                    (group_name, subgroup, '–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å', znamenatel_value, day, time_slot))
                else:
                    cur.execute(f"""
                        INSERT INTO {table_name} (groups, subgroup, ChZn, para, day, time)
                        VALUES (?, ?, ?, ?, ?, ?)""",
                                (group_name, subgroup, '–ß–∏—Å–ª/–ó–Ω–∞–º–µ–Ω', cell_value, day, time_slot))

                row += 2
            else:
                chislitel_cell = sheet.cell(row=row, column=col)
                znamenatel_cell = sheet.cell(row=row + 1, column=col)

                chislitel_value = find_root_cell(sheet, chislitel_cell).value if is_merged(
                    chislitel_cell) else chislitel_cell.value
                znamenatel_value = find_root_cell(sheet, znamenatel_cell).value if is_merged(
                    znamenatel_cell) else znamenatel_cell.value

                if chislitel_value:
                    cur.execute(f"""
                        INSERT INTO {table_name} (groups, subgroup, ChZn, para, day, time)
                        VALUES (?, ?, ?, ?, ?, ?)""",
                                (group_name, subgroup, '–ß–∏—Å–ª–∏—Ç–µ–ª—å', chislitel_value, day, time_slot))
                if znamenatel_value:
                    cur.execute(f"""
                        INSERT INTO {table_name} (groups, subgroup, ChZn, para, day, time)
                        VALUES (?, ?, ?, ?, ?, ?)""",
                                (group_name, subgroup, '–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å', znamenatel_value, day, time_slot))

                row += 2

            classes_count += 1
        row = cell.row + 1 + ((days.index(day) + 1) * 14)

def end_check_schedule(update_files):
    try:
        #–ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω—É—é
        for file in update_files:
            #–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ
            if os.path.exists(os.path.join(foldercheck, file)):
                shutil.move(os.path.join(foldercheck, file), os.path.join(folder, file))
                print(f"–§–∞–π–ª {file} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É")
            else:
                print(f"–§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {foldercheck}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {e}")